.Dd December 8, 2022
.Dt elfgraph 1
.Os
.Sh NAME
.Nm elfgraph
.Nd visualize ELF file dependencies
.Sh SYNOPSIS
.Nm
.Op Fl h
.Op Fl l
.Op Fl T Ar format
.Op Fl b Ar blacklist
.Op Fl B Ar blacklist
.Ar
.Sh DESCRIPTION
.Nm
generates a graph of relationships between ELF files: executables and libraries.
It only considers the files that are passed as positional parameters, and does
not attempt to locate the missing files.

The files that are required but not found will be included in the output, but
grayed out.

.Nm
can render the graph by itself (the default), or print the graph in textual form
for further processing by dot (see the
.Fl T
option)

The options are as follows:
.Bl -tag -width Ds
.It Fl h
Display help.

.It Fl l
Enable dlopen scanning. The dlopen scanner sacrifices accuracy for speed
and uses a very simple heuristic:

.Bl -dash
.It
check if the file in question or any of its dependencies use dlopen;
.It
look for strings that kind of look like library names in the .rodata
section;
.It
display them, and if the file uses dlopen directly, also add a (+dl)
mark to its node.
.El

This approach means that there might be false positives. But, it's very
fast and usually correct...

Needless to say, if the program in question loads library names from
external sources (like configuration files), those wont be detected.

.It Fl T Ar format
Output type. Two output formats are supported:
.Sy tk No (default) and
.Sy dot .

The
.Sy tk
output type creates a window a displays the graph.

The
.Sy dot
output type prints the graph in dot format to stdout.

.It Fl b
Append a comma-separated list of patterns to the default blacklist.

.It Fl B
Use a custom blacklist. This overrides the default of
.Qq c,c++,c++abi,dl,gcc_s,ld-*,m,pthread,rt,stdc++

This blacklist is a list of library names or glob patterns that libraries are
supposed to match against. If a library matches one of the blacklist patterns,
it's excluded from the graph, even if something depends on it.

The
.Qq lib
prefix and the
.Qq .so
suffix should be omitted.

.Sh EXAMPLES
To display a graph of your program's dependencies call:
.Pp
.Dl $ elfgraph foo libbar.so libbaz.so
.Pp
To export such graph into a PDF, pipe the output into dot:
.Pp
.Dl $ elfgraph -T dot foo libbar.so libbaz.so | dot -T pdf >graph.pdf
